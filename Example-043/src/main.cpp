/**********************************************************************************************
 * Examples in the C++ language (the test 'Example-043')
 *
 * GitHub repository: http://github.com/davidcanino/C_plus_plus_examples
 *
 * Created by David Canino (canino.david@gmail.com), January 2017
 *
 * main.cpp - the source file, implementing the main function for the test 'Example-043'.
 **********************************************************************************************/
 
#include <iostream>
#include <fstream>
#include <chrono>
#include <random>
#include <cstdlib>
#include <string>
using namespace std;

/// The main function for the <i>Example-043</i> unit test.
int main(void)
{
	unsigned int seed1;
	string str;
	ofstream out;
	ifstream in;
	
	/* First, we construct a generator, such that its seed is automatically generated from the system clock. */
	cout<<endl<<"\tThis is the example 'Example-043' in the C++ language"<<endl<<endl;
    cout.flush();
    cout<<"\tConstructing a Mersenne twister engine 'm1', such that its seed is automatically generated from the system clock ... ";
	seed1 = (unsigned int)std::chrono::system_clock::now().time_since_epoch().count();
    std::mt19937 m1 (seed1);
	cout<<"ok"<<endl;
	cout<<"\tSystem clock: "<<seed1<<endl;
	cout<<"\tThe minimum random value, generated by the generator 'm1', is: "<<m1.min()<<endl;
	cout<<"\tThe maximum random value, generated by the generator 'm1', is: "<<m1.max()<<endl;
	cout<<"\tGenerating a random value with the generator 'm1': "<<m1()<<endl<<endl;
	cout.flush();
	
	/* Now, we read a (custom) string, inserted by the user, to be used as the new seed. */
	cout<<"\tPlease, insert a string to be used as the new seed: ";
	cout.flush();
	getline(cin,str);
	if(!cin)
	{
		cout<<endl<<"PLEASE, INSERT A VALID STRING TO BE USED AS THE NEW SEED. THIS PROGRAM IS CLOSING ... "<<endl<<endl;
		cout.flush();
		return EXIT_FAILURE;
	}
    
    /* If we arrive here, then we can construct a new generator 'm2' and update the existing generator 'm1' with the new seed! */
	cout<<endl<<"\tConstructing another Mersenne twister engine 'm2', based on the new seed ... ";
	cout.flush();
	std::seed_seq seed2 (str.begin(),str.end());
	std::mt19937 m2 (seed2);
	cout<<"ok"<<endl;
	cout<<"\tThe minimum random value, generated by the generator 'm2', is: "<<m2.min()<<endl;
	cout<<"\tThe maximum random value, generated by the generator 'm2', is: "<<m2.max()<<endl;
	cout<<"\tGenerating a random value with this generator 'm2': "<<m2()<<endl<<endl;
	if(m1==m2) cout<<"\tThe generators 'm1' and 'm2' coincide (wrt the operator '==')"<<endl;
	else cout<<"\tThe generators 'm1' and 'm2' do not coincide (wrt the operator '==')"<<endl;
	if(m1!=m2) cout<<"\tThe generators 'm1' and 'm2' do not coincide (wrt the operator '!=')"<<endl<<endl;
	else cout<<"\tThe generators 'm1' and 'm2' coincide (wrt the operator '!=')"<<endl<<endl;
	cout.flush();
	cout<<"\tGenerating a random value with the generator 'm1': "<<m1()<<endl;
	cout<<"\tUpdating the generator 'm1' with the new seed (the same as the generator 'm2') .. ";
	m1.seed(seed2);
	cout<<"ok"<<endl;
	if(m1==m2) cout<<"\tThe generators 'm1' and 'm2' coincide (wrt the operator '==')"<<endl;
	else cout<<"\tThe generators 'm1' and 'm2' do not coincide (wrt the operator '==')"<<endl;
	if(m1!=m2) cout<<"\tThe generators 'm1' and 'm2' do not coincide (wrt the operator '!=')"<<endl<<endl;
	else cout<<"\tThe generators 'm1' and 'm2' coincide (wrt the operator '!=')"<<endl<<endl;
	cout.flush();
	cout<<"\tGenerating a random value with the generator 'm1': "<<m1()<<endl;
	cout.flush();
	cout<<"\tGenerating another random value with the generator 'm1': "<<m1()<<endl;
	cout.flush();
	cout<<"\tGenerating a random value with the generator 'm2': "<<m2()<<endl;
	cout.flush();
	if(m1==m2) cout<<"\tThe generators 'm1' and 'm2' coincide (wrt the operator '==')"<<endl;
	else cout<<"\tThe generators 'm1' and 'm2' do not coincide (wrt the operator '==')"<<endl;
	if(m1!=m2) cout<<"\tThe generators 'm1' and 'm2' do not coincide (wrt the operator '!=')"<<endl<<endl;
	else cout<<"\tThe generators 'm1' and 'm2' coincide (wrt the operator '!=')"<<endl<<endl;
	cout.flush();
	
	/* Finally, we validate the serialization operators! */
	cout<<"\tExporting the internal state of the generator 'm1' on the 'm1.txt' file (wrt the operator '<<') ... ";
	out.open("m1.txt");
	if(!out)
	{
		cout<<endl<<"\tCANNOT OPEN THE 'm1.txt' FILE. THIS PROGRAM IS CLOSING ... "<<endl<<endl;
		cout.flush();
		return EXIT_FAILURE;
	}
	
	/* The 'm1.txt' file is open! */
	out<<m1;
	out.close();
	cout<<"ok"<<endl<<endl<<"\tCreating another generator 'm3' ... ";
	cout.flush();
	std::mt19937 m3;
	cout<<"ok"<<endl;
	cout.flush();
	if(m1==m3) cout<<"\tThe generators 'm1' and 'm3' coincide (wrt the operator '==')"<<endl;
	else cout<<"\tThe generators 'm1' and 'm3' do not coincide (wrt the operator '==')"<<endl;
	if(m1!=m3) cout<<"\tThe generators 'm1' and 'm3' do not coincide (wrt the operator '!=')"<<endl<<endl;
	else cout<<"\tThe generators 'm1' and 'm3' coincide (wrt the operator '!=')"<<endl<<endl;
	cout<<"\tSaving the internal state of the generator 'm1' (from the 'm1.txt' file) into the generator 'm3' (wrt the operator '>>') ... ";
	in.open("m1.txt");
	if(!in)
	{
		cout<<endl<<"\tCANNOT OPEN THE 'm1.txt' FILE. THIS PROGRAM IS CLOSING ... "<<endl<<endl;
		cout.flush();
		return EXIT_FAILURE;
	}
	
	/* Saving everything from the 'm1.txt' file into the generator 'm3'. */
	in>>m3;
	in.close();
	cout<<"ok"<<endl;
	cout.flush();
	if(m1==m3) cout<<"\tThe generators 'm1' and 'm3' coincide (wrt the operator '==')"<<endl;
	else cout<<"\tThe generators 'm1' and 'm3' do not coincide (wrt the operator '==')"<<endl;
	if(m1!=m3) cout<<"\tThe generators 'm1' and 'm3' do not coincide (wrt the operator '!=')"<<endl<<endl;
	else cout<<"\tThe generators 'm1' and 'm3' coincide (wrt the operator '!=')"<<endl<<endl;
	return EXIT_SUCCESS;
}

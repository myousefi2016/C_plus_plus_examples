/**********************************************************************************************
 * Examples in the C++ language (the test 'Example-044')
 *
 * GitHub repository: http://github.com/davidcanino/C_plus_plus_examples
 *
 * Created by David Canino (canino.david@gmail.com), January 2017
 *
 * main.cpp - the source file, implementing the main function for the test 'Example-044'.
 **********************************************************************************************/
 
#include <iostream>
#include <fstream>
#include <chrono>
#include <random>
#include <cstdlib>
#include <string>
using namespace std;

/// The main function for the <i>Example-044</i> unit test.
int main(void)
{
	unsigned int seed1;
	string str;
	ofstream out;
	ifstream in;
	
	/* First, we construct a generator, such that its seed is automatically generated from the system clock. */
	cout<<endl<<"\tThis is the example 'Example-044' in the C++ language"<<endl<<endl;
    cout.flush();
    cout<<"\tConstructing a lagged Fibonacci generator engine 'f1', such that its seed is automatically generated from the system clock ... ";
    seed1 = (unsigned int)std::chrono::system_clock::now().time_since_epoch().count();
    std::ranlux24_base f1(seed1);
    cout<<"ok"<<endl;
	cout<<"\tSystem clock: "<<seed1<<endl;
	cout<<"\tThe minimum random value, generated by the generator 'f1', is: "<<f1.min()<<endl;
	cout<<"\tThe maximum random value, generated by the generator 'f1', is: "<<f1.max()<<endl;
	cout<<"\tGenerating a random value with the generator 'f1': "<<f1()<<endl<<endl;
	cout.flush();
	
	/* Now, we read a (custom) string, inserted by the user, to be used as the new seed. */
	cout<<"\tPlease, insert a string to be used as the new seed: ";
	cout.flush();
	getline(cin,str);
	if(!cin)
	{
		cout<<endl<<"PLEASE, INSERT A VALID STRING TO BE USED AS THE NEW SEED. THIS PROGRAM IS CLOSING ... "<<endl<<endl;
		cout.flush();
		return EXIT_FAILURE;
	}
	
	/* If we arrive here, then we can construct a new generator 'f2' and update the existing generator 'f1' with the new seed! */
	cout<<endl<<"\tConstructing another lagged Fibonacci generator engine 'f2', based on the new seed ... ";
	cout.flush();
	std::seed_seq seed2 (str.begin(),str.end());
	std::ranlux24_base f2 (seed2);
	cout<<"ok"<<endl;
	cout<<"\tThe minimum random value, generated by the generator 'f2', is: "<<f2.min()<<endl;
	cout<<"\tThe maximum random value, generated by the generator 'f2', is: "<<f2.max()<<endl;
	cout<<"\tGenerating a random value with this generator 'f2': "<<f2()<<endl<<endl;
	if(f1==f2) cout<<"\tThe generators 'f1' and 'f2' coincide (wrt the operator '==')"<<endl;
	else cout<<"\tThe generators 'f1' and 'f2' do not coincide (wrt the operator '==')"<<endl;
	if(f1!=f2) cout<<"\tThe generators 'f1' and 'f2' do not coincide (wrt the operator '!=')"<<endl<<endl;
	else cout<<"\tThe generators 'f1' and 'f2' coincide (wrt the operator '!=')"<<endl<<endl;
	cout.flush();
	cout<<"\tGenerating a random value with the generator 'f1': "<<f1()<<endl;
	cout<<"\tUpdating the generator 'f1' with the new seed (the same as the generator 'f2') .. ";
	f1.seed(seed2);
	cout<<"ok"<<endl;
	if(f1==f2) cout<<"\tThe generators 'f1' and 'f2' coincide (wrt the operator '==')"<<endl;
	else cout<<"\tThe generators 'f1' and 'f2' do not coincide (wrt the operator '==')"<<endl;
	if(f1!=f2) cout<<"\tThe generators 'f1' and 'f2' do not coincide (wrt the operator '!=')"<<endl<<endl;
	else cout<<"\tThe generators 'f1' and 'f2' coincide (wrt the operator '!=')"<<endl<<endl;
	cout.flush();
	cout<<"\tGenerating a random value with the generator 'f1': "<<f1()<<endl;
	cout.flush();
	cout<<"\tGenerating another random value with the generator 'f1': "<<f1()<<endl;
	cout.flush();
	cout<<"\tGenerating a random value with the generator 'f2': "<<f2()<<endl;
	cout.flush();
	if(f1==f2) cout<<"\tThe generators 'f1' and 'f2' coincide (wrt the operator '==')"<<endl;
	else cout<<"\tThe generators 'f1' and 'f2' do not coincide (wrt the operator '==')"<<endl;
	if(f1!=f2) cout<<"\tThe generators 'f1' and 'f2' do not coincide (wrt the operator '!=')"<<endl<<endl;
	else cout<<"\tThe generators 'f1' and 'f2' coincide (wrt the operator '!=')"<<endl<<endl;
	cout.flush();
	
	/* Finally, we validate the serialization operators! */
	cout<<"\tExporting the internal state of the generator 'f1' on the 'f1.txt' file (wrt the operator '<<') ... ";
	out.open("f1.txt");
	if(!out)
	{
		cout<<endl<<"\tCANNOT OPEN THE 'f1.txt' FILE. THIS PROGRAM IS CLOSING ... "<<endl<<endl;
		cout.flush();
		return EXIT_FAILURE;
	}
	
	/* The 'f1.txt' file is open! */
	out<<f1;
	out.close();
	cout<<"ok"<<endl<<endl<<"\tCreating another generator 'f3' ... ";
	cout.flush();
	std::ranlux24_base f3;
	cout<<"ok"<<endl;
	cout.flush();
	if(f1==f3) cout<<"\tThe generators 'f1' the 'f3' coincide (wrt the operator '==')"<<endl;
	else cout<<"\tThe generators 'f1' and 'f3' do not coincide (wrt the operator '==')"<<endl;
	if(f1!=f3) cout<<"\tThe generators 'f1' and 'f3' do not coincide (wrt the operator '!=')"<<endl<<endl;
	else cout<<"\tThe generators 'f1' and 'f3' coincide (wrt the operator '!=')"<<endl<<endl;
	cout<<"\tSaving the internal state of the generator 'f1' (from the 'f1.txt' file) into the generator 'f3' (wrt the operator '>>') ... ";
	in.open("f1.txt");
	if(!in)
	{
		cout<<endl<<"\tCANNOT OPEN THE 'f1.txt' file. THIS PROGRAM IS CLOSING ... "<<endl<<endl;
		cout.flush();
		return EXIT_FAILURE;
	}
	
	/* Saving everything from the 'f1.txt' file into the generator 'f3'. */
	in>>f3;
	in.close();
	cout<<"ok"<<endl;
	cout.flush();
	if(f1==f3) cout<<"\tThe generators 'f1' and 'f3' coincide (wrt the operator '==')"<<endl;
	else cout<<"\tThe generators 'f1' and 'f3' do not coincide (wrt the operator '==')"<<endl;
	if(f1!=f3) cout<<"\tThe generators 'f1' and 'f3' do not coincide (wrt the operator '!=')"<<endl<<endl;
	else cout<<"\tThe generators 'f1' and 'f3' coincide (wrt the operator '!=')"<<endl<<endl;
	return EXIT_SUCCESS;
}

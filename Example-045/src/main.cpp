/**************************************************************************************************
 * Examples in the C++ language (the 'Example-045' unit test).
 *
 * GitHub repository: http://github.com/davidcanino/C_plus_plus_examples
 *
 * Created by David Canino (canino.david@gmail.com), March 2017
 *
 * main.cpp - the source file, implementing the main function for the 'Example-045' unit test.
 **************************************************************************************************/
 
#include <iostream>
#include <fstream>
#include <chrono>
#include <random>
#include <cstdlib>
#include <string>
using namespace std;

/// The main function for the <i>Example-045</i> unit test.
int main(void)
{
	unsigned int sees1;
	string str;
	ofstream out;
	ifstream in;
	
	/* This is the 'Example-045' unit test, where the generation of several pseudo-random values through a 'Shuffle order engine' is tested! */
    cout<<endl<<"\tThis is the 'Example-045' unit test in the C++ language."<<endl<<endl;
    cout.flush();
    
    /* TASK #1 - we construct a Shuffle order engine, such that its seed is automatically generated from the system clock. */
	cout<<"\tConstructing a Shuffle order engine 's1', such that its seed is automatically generated from the current system clock ... ";
	sees1 = (unsigned int)std::chrono::system_clock::now().time_since_epoch().count();
	std::knuth_b s1(sees1);
	cout<<"ok"<<endl;
	cout<<"\tThe current system clock is "<<sees1<<"."<<endl;
	cout<<"\tThe minimum random value, generated by the Shuffle order engine 's1', is "<<s1.min()<<"."<<endl;
	cout<<"\tThe maximum random value, generated by the Shuffle order engine 's1', is "<<s1.max()<<"."<<endl;
	cout<<"\tGenerating a random value with the Shuffle order engine 's1': "<<s1()<<"."<<endl<<endl;
	cout.flush();
	
	/* TASK #2 - we read a (custom) string, inserted by the user, to be used as the new seed. */
	cout<<"\tPlease, insert a string to be used as the new seed: ";
	cout.flush();
	getline(cin,str);
	if(!cin)
	{
		cout<<endl<<"PLEASE, INSERT A VALID STRING TO BE USED AS THE NEW SEED."<<endl<<endl<<"\tTHIS PROGRAM IS CLOSING ... "<<endl<<endl;
		cout.flush();
		return EXIT_FAILURE;
	}
	
	/* TASK #3 - if we arrive here, then we can construct a new Shuffle order engine 's2' and update the existing Shuffle order engine 's1' with the new seed! */
	cout<<endl<<"\tConstructing another Shuffle order engine 's2' (based on the new seed) ... ";
	cout.flush();
	std::seed_seq sees2 (str.begin(),str.end());
	std::knuth_b s2 (sees2);
	cout<<"ok"<<endl;
	cout<<"\tThe minimum random value, generated by the Shuffle order engine 's2', is "<<s2.min()<<"."<<endl;
	cout<<"\tThe maximum random value, generated by the Shuffle order engine 's2', is "<<s2.max()<<"."<<endl;
	cout<<"\tGenerating a random value with this Shuffle order engine 's2': "<<s2()<<"."<<endl;
	if(s1==s2) cout<<"\tThe internal states of the Shuffle order engines 's1' and 's2' coincide (with respect to the operator '==')"<<endl;
	else cout<<"\tThe internal states of the Shuffle order engines 's1' and 's2' do not coincide (with respect to the operator '==')"<<endl;
	if(s1!=s2) cout<<"\tThe internal states of the Shuffle order engines 's1' and 's2' do not coincide (with respect to the operator '!=')"<<endl<<endl;
	else cout<<"\tThe internal states of the Shuffle order engines 's1' and 's2' coincide (with respect to the operator '!=')"<<endl<<endl;
	cout<<"\tGenerating a random value with the Shuffle order engine 's1': "<<s1()<<"."<<endl;
	cout<<"\tUpdating the Shuffle order engine 's1' with the new seed (the same as the Shuffle order engine 's2') .. ";
	s1.seed(sees2);
	cout<<"ok"<<endl;
	if(s1==s2) cout<<"\tThe internal states of the Shuffle order engines 's1' and 's2' coincide (with respect to the operator '==')"<<endl;
	else cout<<"\tThe internal states of the Shuffle order engines 's1' and 's2' do not coincide (with respect to the operator '==')"<<endl;
	if(s1!=s2) cout<<"\tThe internal states of the Shuffle order engines 's1' and 's2' do not coincide (with respect to the operator '!=')"<<endl<<endl;
	else cout<<"\tThe internal states of the Shuffle order engines 's1' and 's2' coincide (with respect to the operator '!=')"<<endl<<endl;
	cout.flush();
    
    /* TASK #4 - generating several random values in order to align the Shuffle order engines 's1' and 's2'. */
	cout<<"\tGenerating a random value with the Shuffle order engine 's1': "<<s1()<<"."<<endl;
	cout<<"\tGenerating another random value with the Shuffle order engine 's1': "<<s1()<<"."<<endl;
	cout<<"\tGenerating a random value with the Shuffle order engine 's2': "<<s2()<<"."<<endl;
	if(s1==s2) cout<<"\tThe internal states of the Shuffle order engines 's1' and 's2' coincide (with respect to the operator '==')"<<endl;
	else cout<<"\tThe internal states of the Shuffle order engines 's1' and 's2' do not coincide (with respect to the operator '==')"<<endl;
	if(s1!=s2) cout<<"\tThe internal states of the Shuffle order engines 's1' and 's2' do not coincide (with respect to the operator '!=')"<<endl<<endl;
	else cout<<"\tThe internal states of the Shuffle order engines 's1' and 's2' coincide (with respect to the operator '!=')"<<endl<<endl;
	cout.flush();
	
	/* TASK #5 - we validate the serialization operators! */
	cout<<"\tExporting the internal state of the Shuffle order engine 's1' on the 's1.txt' file (with respect to the operator '<<') ... ";
	out.open("s1.txt");
	if(!out)
	{
		cout<<endl<<"\tCANNOT OPEN THE 's1.txt' FILE."<<endl<<endl<<"\tTHIS PROGRAM IS CLOSING ... "<<endl<<endl;
		cout.flush();
		return EXIT_FAILURE;
	}
	
	/* The 's1.txt' file is open! */
	out<<s1;
	out.close();
	cout<<"ok"<<endl<<"\tCreating another Shuffle order engine 's3' ... ";
	cout.flush();
	std::knuth_b s3;
	cout<<"ok"<<endl;
	cout.flush();
	if(s1==s3) cout<<"\tThe internal states of the Shuffle order engines 's1' and 's3' coincide (with respect to the operator '==')"<<endl;
	else cout<<"\tThe internal states of the Shuffle order engines 's1' and 's3' do not coincide (with respect to the operator '==')"<<endl;
	if(s1!=s3) cout<<"\tThe internal states of the Shuffle order engines 's1' and 's3' do not coincide (with respect to the operator '!=')"<<endl<<endl;
	else cout<<"\tThe internal states of the Shuffle order engines 's1' and 's3' coincide (with respect to the operator '!=')"<<endl<<endl;
	cout.flush();
	cout<<"\tSaving the internal state of the Shuffle order engine 's1' (from the 's1.txt' file) into the Shuffle order engine 's3' (with respect to the operator '>>') ... ";
	in.open("s1.txt");
	if(!in)
	{
		cout<<endl<<"\tCANNOT OPEN THE 's1.txt' FILE."<<endl<<endl<<"\tTHIS PROGRAM IS CLOSING ... "<<endl<<endl;
		cout.flush();
		return EXIT_FAILURE;
	}
	
	/* Saving everything from the 's1.txt' file into the Shuffle order engine 's3'. */
	in>>s3;
	in.close();
	cout<<"ok"<<endl;
	if(s1==s3) cout<<"\tThe internal states of the Shuffle order engines 's1' and 's3' coincide (with respect to the operator '==')"<<endl;
	else cout<<"\tThe internal states of the Shuffle order engines 's1' and 's3' do not coincide (with respect to the operator '==')"<<endl;
	if(s1!=s3) cout<<"\tThe internal states of the Shuffle order engines 's1' and 's3' do not coincide (with respect to the operator '!=')"<<endl<<endl;
	else cout<<"\tThe internal states of the Shuffle order engines 's1' and 's3' coincide (with respect to the operator '!=')"<<endl<<endl;
	cout.flush();
	return EXIT_SUCCESS;
}
